
package lab7.excercises;
//Queue.java: is a queue implementation using generic parameterized type E

public class QueueMain{

    public static void main(String[] args) {

        LinkedQueue<String> queue = new LinkedQueue<String>();
        queue.enqueue("GB");
        queue.enqueue("DE");
        queue.enqueue("FR");
        queue.enqueue("ES");
        queue.printQueue();
        System.out.println("queue.element(): " + queue.element());
        System.out.println("queue.dequeue(): " + queue.dequeue());
        queue.printQueue();
        System.out.println("queue.dequeue(): " + queue.dequeue());
        queue.printQueue();
        System.out.println("queue.enqueue(\"IE\"): ");
        queue.enqueue("IE");
        queue.printQueue();
        System.out.println("queue.dequeue(): " + queue.dequeue());
        queue.printQueue();

    }

}
class Node <T>{
    T data;
    Node next = null;
    
    Node(T d){
        data = d;
    }
}
interface Queue<E> {
    public void enqueue(E element);
    public E element();
    public boolean isEmpty();
    public E dequeue();
    public int size();
}
class SingleLinkedList <T>{
    
    public Node head;
    public Node tail;
    
    void insertFirst(T data){
        if (head == null)
            head = new Node(data);
        else{
            Node newNode = new Node(data);
            newNode.next = head;
            head = newNode;
        }
        
    }
    void insertLast(T data){
        
        if (head == null)
            head = new Node(data);
        else{
            Node cur = head;
            for(; cur.next != null; cur = cur.next);
                
            Node newNode = new Node(data);
            cur.next = newNode;
        }
    }
    void insertAfterNode(T prevData, T newData){
        Node cur = head;
        while(cur.next != null && cur.data != prevData)
            cur = cur.next;
        Node newNode = new Node(newData);
        newNode.next = cur.next;
        cur.next = newNode;
    }
    void deleteFirst(){
        if(head != null)
            head = head.next;
        else
            System.out.println("List is empty");
    }
    void deleteLast(){
        if(head == null){
            System.out.println("List is empty");
            return;
        }
        Node cur = head;
        for(; cur.next.next != null; cur = cur.next);
        cur.next = null;
    }
    void deleteAfterNode(T prevData){
        if(head == null){
            System.out.println("List is empty");
            return;
        }
        Node cur = head;
        while(cur.next.next != null && cur.data != prevData)
            cur = cur.next;
        if(cur.data != prevData)
            System.out.println("List does not contain the target node or the target node is the last node!");
        else
            cur.next = cur.next.next;
    }
    void displayList(){
        if(head == null){
            System.out.println("List is empty");
            return;
        }
        Node cur = head;
        while(cur != null){
            System.out.print(cur.data + " -> ");
            cur = cur.next;
        }
        System.out.println("/");
    }
    
}
class ArrayQueue<E> implements Queue<E> {
    
    private E[] elements;
    private int front;
    private int back;
    private static final int INITIAL_CAPACITY = 4;


    public ArrayQueue() {
        elements = (E[]) new Object[INITIAL_CAPACITY];
    }
    public ArrayQueue(int capacity) {
        elements = (E[]) new Object[capacity];
    }
    public void enqueue(E element) {
        if (size() == elements.length - 1) {
            resize();
        }
        elements[back] = element;
        if (back < elements.length - 1) {
            ++back;
        } else {
            back = 0; // wrap
        }
    }
    public E element() {
        if (size() == 0) {
            throw new java.util.NoSuchElementException();
        }
        return elements[front];
    } 
    public boolean isEmpty() {
        return (size() == 0);
    }
    public E dequeue() {
        if (size() == 0) {
            throw new java.util.NoSuchElementException();
        }
        E element = elements[front];
        elements[front] = null;
        ++front;
        if (front == back) { // queue is empty
            front = back = 0;
        }
        if (front == elements.length) { // wrap
            front = 0;
        }
        return element;
    }
    public int size() {
        if (front <= back) {
            return back - front;
        } else {
            return back - front + elements.length;
        }
    }
    private void resize() {
        int size = size();
        int len = elements.length;
        assert size == len;
        Object[] a = new Object[2 * len];
        System.arraycopy(elements, front, a, 0, len - front);
        System.arraycopy(elements, 0, a, len - front, back);
        elements = (E[]) a;
        front = 0;
        back = size;
    }
    public void printQueue() {
        System.out.print("[");
        String str = "";
        if (front <= back) {
            for (int i = front; i < back; i++)
                str += elements[i] + ",";
        } else {
            for (int i = front; i < elements.length; i++)
                str += elements[i] + ",";
            if (back != 0)
                for (int i = 0; i < back; i++)
                    str += elements[i] + ",";
        }
        if (str.length() != 0)
            str = str.substring(0, str.length() - 1);
        System.out.print(str + "]\n");
    }
}
class LinkedQueue <E> implements Queue <E>{
    
    public SingleLinkedList <E> lnkdQ = new SingleLinkedList <E>();
    public Node<E> f;
    public Node<E> r;
    public int Size;
    
    public void enqueue(E element){
        if(Size == 0){
            lnkdQ.insertLast(element);
            f = r = lnkdQ.head ;
        }else{
            lnkdQ.insertLast(element);
            r = lnkdQ.tail;
        }
        ++Size;
    }
    public E element(){
        if (size() == 0) {
            throw new java.util.EmptyStackException();
        }
        return f.data;
    }
    public boolean isEmpty(){
        return (Size == 0);
    }
    public E dequeue(){
        if (size() == 0) {
            throw new java.util.EmptyStackException();
        }
        E element = f.data ;
        lnkdQ.deleteFirst();
        f = lnkdQ.head;
        --Size;
        
        return element;
    }
    public int size(){
        return Size;
    }   
    public void printQueue(){
        System.out.print("[");
        String str = "";
        if(!isEmpty()){
            Node cur = f;
            for(int i = 0; i<Size; i++){
                str += cur.data +" , ";
                cur = cur.next;
            }
        }
        if(str.length() != 0){
            str = str.substring(0, str.length()-1);
        }
        System.out.print(str+"|\n");
        
    }
}

