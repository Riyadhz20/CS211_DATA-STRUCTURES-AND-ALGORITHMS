
package lab9;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.Vector;

public class Lab9 {

    public static void main(String[] args) {
      
        DiGraph g = new DiGraph(10);
        
        g.addEdge(1, 0);
        g.addEdge(0, 2);
        g.addEdge(2, 1);
        g.addEdge(0, 3);
        g.addEdge(1, 4);
        g.addEdge(4, 5);
        g.addEdge(4, 6);
        g.addEdge(4, 7);
        g.addEdge(6, 7);
        g.addEdge(6, 8);
        g.addEdge(8, 9);
        g.addEdge(9, 9);
        
        g.printGraph();
        System.out.println("Depth First Search visit order: ");
        g.DFS(0);
        System.out.println();
        System.out.println("Breadth First Search visit order: ");
        g.BFS(0);
    }
}
class DiGraph {
    int V;
    LinkedList<Integer> adj[]; 
    
    DiGraph(int V) {
        this.V = V;
        adj = new LinkedList[V];
        for (int i = 0; i < adj.length; i++)
            adj[i] = new LinkedList<Integer>();
    }
    void addEdge(int v, int w) {
        adj[v].add(w); // Add w to vâ€™s list.
        adj[w].add(v); // undirected
        
    }
    void DFS(int s) {
        Vector<Boolean> V = new Vector<Boolean>(this.V);
        for(int i=0; i<this.V; i++){
            V.add(false);
        }
        Stack <Integer> S = new Stack<>();
        S.push(s);
        while(S.empty()==false){
            s = S.peek();
            S.pop();
            if(V.get(s)==false){
               System.out.print(s+" ");
               V.set(s, true);
            }
            Iterator <Integer> I = adj[s].iterator();
            while(I.hasNext()){
                int v = I.next();
                if(!V.get(v)){
                    S.push(v);
                }
            }
        }
    }
    void BFS(int s) {
        Vector<Boolean> V = new Vector<Boolean>(this.V);
        for(int i=0; i<this.V; i++){
            V.add(false);
        }
        Queue G = new LinkedList<>();
        V.set(s, true);
        G.add(s);
        while(G.isEmpty()==false){
            s = (int)G.poll();
            
            if(V.get(s)==false){
               System.out.print(s+" ");
               V.set(s, true);
            }
            Iterator <Integer> I = adj[s].iterator();
            while(I.hasNext()){
                int v = I.next();
                if(!V.get(v)){
                    G.add(v);
                }
            }
        }
    }
    public void printGraph() {
        for (int src = 0; src < adj.length; src++) {
            System.out.print(src);
            for (Integer dest : adj[src]) {
                System.out.print(" -> " + dest);
            }
            System.out.println();
        }
    }
}