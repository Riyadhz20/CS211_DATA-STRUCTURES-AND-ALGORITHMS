
package lab8.hw;

import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Queue;

public class Lab8HW {

    public static void main(String[] args) {
        
        BST T = new BST();
        T.insert(5);
        T.insert(3);
        T.insert(9);
        T.insert(1);
        T.insert(4);
        T.insert(6);
        System.out.println("The root of Bi-Tree is: " + (T.root()));
        System.out.println("In-order traversal sequence :");
        T.inOrder();
        System.out.println("Pre-order traversal sequence :");
        T.preOrder();
        System.out.println("Post-order traversal sequence :");
        T.postOrder();
        System.out.println("Level-order traversal sequence :");
        T.levelOrder();
        System.out.println("In-order traversal sequence (after mirroring) :");
        T.mirror();
        T.inOrder();
        
        System.out.println("delete the node 1");
        T.deleteNode(1);
        T.inOrder();
        System.out.println(T.root());
        int max =  T.findMax(T);
        System.out.println("Maximum value in the tree : "+max);
        System.out.println("Post-order sequence (after mirroring) :");
        T.mirror();
        T.inOrder();
        T.insertByLevel(12);
        System.out.println("In-order traversal sequence after inser 12 by level");
        T.inOrder();
    }
}
class Node {
    Node left;
    Node right;
    int data;
    
    Node(int newData) {
        left = null;
        right = null;
        data = newData;
    }
}
class BST {
    
    private Node root;
    
    public void BST() {
        root = null;
    }
    public void insert(int data) {
        root = insert(root, data);
    }
    private Node insert(Node node, int data) {
        if (node == null) {
            node = new Node(data);
        } else {
            if (data <= node.data) {
                node.left = insert(node.left, data);
            } else {
                node.right = insert(node.right, data);
            }
        }
        return (node);
    }
    public int size() {
        return (size(root));
    }
    private int size(Node node) {
        if (node == null) {
            return 0;
        }
        return size(node.left)+1+size(node.right);
    }
    public boolean lookup(int data) {
        return (lookup(root, data));
    }
    private boolean lookup(Node node, int data) {
        if (node == null) {
            return (false);
        }
        if (data == node.data) {
            return (true);
        } else if (data < node.data) {
            return (lookup(node.left, data));
        } else {
            return (lookup(node.right, data));
        }
    }
    public void inOrder() {
        inorderTree(root);
        System.out.println();
    }
    private void inorderTree(Node node) {
        if (node == null) {
            return;
        }
        // left, node itself, right
        inorderTree(node.left);
        System.out.print(node.data + " ");
        inorderTree(node.right);
    }
    public void preOrder() {
        preOrder(root);
        System.out.println();
    }
    public void preOrder(Node node) {
        if (node == null) {
            return;
        }
        // node itself, left, right
        System.out.print(node.data + " ");
        preOrder(node.left);
        preOrder(node.right);
    }
    public void postOrder() {
        postOrder(root);
        System.out.println();
    }
    public void postOrder(Node node) {
        if (node == null) {
            return;
        }
        // left, right, node itself
        postOrder(node.left);
        postOrder(node.right);
        System.out.print(node.data + " ");
    }
    public void levelOrder() {
        levelOrder(root);
        System.out.println();
    }
    public void levelOrder(Node node) {
        if (node != null) {
            Queue<Node> q = new ArrayDeque<Node>();
            q.add(node);
            while (q.size() != 0) {
                Node currentNode = q.remove();
                System.out.print(currentNode.data + " ");
                if (currentNode.left != null) {
                    q.add(currentNode.left);
                }
                if (currentNode.right != null) {
                    q.add(currentNode.right);
                }
            }
        }
    }
    public void mirror() {
        mirror(this.root);
    }
    private Node mirror(Node node) {
        if(node == null)
            return node;
        
        Node L = mirror(node.left);
        Node R = mirror(node.right);
        node.left = R;
        node.right = L;
        
        return node;
    }
    public int root() {
        return root.data;
    }
    
    public void deleteNode(int key){
        Node node ;
        Node R = root;
        Node pre = null;
           
        while (R != null && R.data != key){
            pre = R;
            if(R.data > key )
                R = R.right;
            else
                R = R.left;
        }
        node = R;
        if(R != null && R.data == key){
            if(node.right == null)
                node = node.left;
            else if(node.left == null)
                node = node.right;
            else{
                Node temp = node.left;
                Node temp2 = node;
                while(temp.right != null){
                    temp2 = temp ;
                    temp = temp.right;
                }
                node.data = temp.data;
                if (temp2 == node)
                    temp2.left = temp.left;
                else
                    temp2.right = temp.left;
            }
            if (R == root)
                root = node;
            else if(pre.left == R)
                pre.left = node;
            else
                pre.right = node;
        }
        else if (root != null)
            System.out.println("The Elelemnt = " + key +" is not in the Tree");
        else
            System.out.println("The Tree is Empty !");
    }
    public  int findMax(BST T) {
        return findMax(T.root);
    }
    public  int findMax(Node node){
        if (node == null)
            return Integer.MIN_VALUE;
        
        int res = node.data;
        int lres = findMax(node.left);
        int rres = findMax(node.right);
        
        if (lres > res)
            res = lres;
        if (rres > res)
            res = rres;
        
        return res;
    }
    public void insertByLevel( int key){ 
        Node temp = root;
        Queue<Node> q = new LinkedList<Node>(); 
        q.add(temp);
        while (!q.isEmpty()) { 
            temp = q.peek(); 
            q.remove();
            if (temp.left == null) { 
                temp.left = new Node(key); 
                break; 
            } else
                q.add(temp.left);
            if (temp.right == null) { 
                temp.right = new Node(key); 
                break; 
            } else
                q.add(temp.right); 
        } 
    }
}